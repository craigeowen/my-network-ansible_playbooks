So far in each of the playbooks that I have introduced, the variables
have been contained withhin the body of the task. Ths is pretty
inefficient and also can cause problems with typos and the like.

But more importantly the passwords. So lets take a look and address 
these points.

Firtly lets create a variables file that playbooks can refer to...here
we will contain any variables that are going to be repeatedly refered to.

vars.yml

username: cisco
password: P4ssw0rd!
authorize: true
auth_pass: P4ssw0rd!

So now all we nedd to do in the playbook is 
1. create a variable section to hold the variables that we will reference 
from the tasks.
2. add a pointer to the file, to allow the variables to be called 
into the task.

But I hear you scream what about the passwords...yes now lets address
that. Ansible includes a vault function, to allow password files to
be encrypted. The vault file and the vars files must be in the same
directory.

so create the vars.yml
now copy the contents of the password variables into vault.yml

run the following to encrypt the vault.yml

ansible-vault create vault.yml
New Vault password: 
Confirm New Vault password: 
Encryption successful

So now we change the variables in the vars file to point to the encrypted
password in the vaults.yml...I will recreate all 3 files below

Playbook: site1_cisco_showVersion.yml
---
- hosts: edgerouter
  gather_facts: no
  connection: local


  vars:
    provider: # this is the user login and enable password
      username: "{{ cisco_username }}" #ref vars file
      password: "{{ cisco_password }}" # ref vars/vault files (encrypted vault)
      authorize: "{{ cisco_authorize }}"
      auth_pass: "{{ cisco_auth_pass }}"
  
  vars_files:
    - vault.yml
    - vars.yml


  tasks:
  - name: show version
    ios_facts:
      gather_subset: hardware
      provider: "{{ provider }}" # refer to provider variables above

  - name: print out the IOS version
    debug:
      var: ansible_net_version
      
vars.yml

device_type: cisco_ios

cisco_username: cisco # login name
cisco_password: "{{ vault_cisco_password }}" # login pwd
cisco_authorize: true # allow enable
cisco_auth_pass: "{{ vault_cisco_auth_pass }}" # enable secret pwd

vault.yml
vault_cisco_password: "{{ P4ssw0rd! }}"
vault_cisco_auth_pass: "{{ P4ssword! }}"
